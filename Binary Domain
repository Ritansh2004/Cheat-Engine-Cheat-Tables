<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>261</ID>
      <Description>"Binary Domain"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>258</ID>
          <Description>"Campaign   [Team Trust]"</Description>
          <LastState/>
          <Color>800080</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(team_trust,BinaryDomain.exe,89 4D 1C 8B 35 7C BC 54 01)
alloc(newmem,$100)
label(return)
registersymbol(team_trust)
newmem:
  mov [ebp+1C],F4240
  mov esi,[BinaryDomain.exe+114BC7C]
  jmp return
team_trust:
  jmp newmem
  nop 4
return:
[DISABLE]
dealloc(newmem)
unregistersymbol(team_trust)
team_trust:
  db 89 4D 1C 8B 35 7C BC 54 01
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>253</ID>
          <Description>"Campaign   [Inventory]   Shock Burst"</Description>
          <LastState/>
          <Color>FF8000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(shock_burst,BinaryDomain.exe,66 29 A8 82 00 00 00)
alloc(newmem,$100)
label(return)
registersymbol(shock_burst)
newmem:
  add [eax+82],bp
  jmp return
shock_burst:
  jmp newmem
  nop 2
return:
[DISABLE]
dealloc(newmem)
unregistersymbol(shock_burst)
shock_burst:
  db 66 29 A8 82 00 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>257</ID>
          <Description>"Campaign   [Inventory]   Funds CR"</Description>
          <LastState/>
          <Color>00FF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(funds_cr_collected,BinaryDomain.exe,89 4E 14 89 54 24 14)
aobscanmodule(funds_cr_used,BinaryDomain.exe,89 46 14 8B 04 24)
alloc(newmem_x,$100)
alloc(newmem_y,$100)
label(return_x)
label(return_y)
registersymbol(funds_cr_collected)
registersymbol(funds_cr_used)
newmem_x:
  mov [esi+14],5F5E0FF
  mov [esp+14],edx
  jmp return_x
funds_cr_collected:
  jmp newmem_x
  nop 2
return_x:
newmem_y:
  mov [esi+14],5F5E0FF
  mov eax,[esp]
  jmp return_y
funds_cr_used:
  jmp newmem_y
  nop
return_y:
[DISABLE]
dealloc(newmem_x)
dealloc(newmem_y)
unregistersymbol(funds_cr_collected)
unregistersymbol(funds_cr_used)
funds_cr_collected:
  db 89 4E 14 89 54 24 14
funds_cr_used:
  db 89 46 14 8B 04 24
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>256</ID>
          <Description>"Campaign   [Inventory]   First Aid Kit"</Description>
          <LastState/>
          <Color>0080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(first_aid_kit,BinaryDomain.exe,FE 88 81 00 00 00 C3)
alloc(newmem,$100)
label(return)
registersymbol(first_aid_kit)
newmem:
  inc [eax+81]
  jmp return
first_aid_kit:
  jmp newmem
  nop
return:
[DISABLE]
dealloc(newmem)
unregistersymbol(first_aid_kit)
first_aid_kit:
  db FE 88 81 00 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>254</ID>
          <Description>"Campaign   [Inventory]   Ammo   [Reload On]"</Description>
          <LastState/>
          <Color>FFFF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
local pReloadOff = getAddressList().getMemoryRecordByDescription("Campaign   [Inventory]   Ammo   [Reload Off]")
if (pReloadOff.Active) then
 pReloadOff.Active = false
end
{$asm}
aobscanmodule(inventory_ammo_capacity,BinaryDomain.exe,48 66 89 87 66 02 00 00)
alloc(newmem_x,$100)
label(return_x)
registersymbol(inventory_ammo_capacity)
newmem_x:
  inc eax
  mov [edi+266],ax
  jmp return_x
inventory_ammo_capacity:
  jmp newmem_x
  nop 3
return_x:
[DISABLE]
dealloc(newmem_x)
unregistersymbol(inventory_ammo_capacity)
inventory_ammo_capacity:
  db 48 66 89 87 66 02 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>260</ID>
          <Description>"Campaign   [Inventory]   Ammo   [Reload Off]"</Description>
          <LastState/>
          <Color>FFFF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
local pReloadOn = getAddressList().getMemoryRecordByDescription("Campaign   [Inventory]   Ammo   [Reload On]")
if (pReloadOn.Active) then
 pReloadOn.Active = false
end
{$asm}
aobscanmodule(inventory_ammo_capacity,BinaryDomain.exe,48 66 89 87 66 02 00 00)
aobscanmodule(inventory_ammo_used,BinaryDomain.exe,BA FF FF 00 00 66 01 97)
alloc(ammo,4)
alloc(newmem_x,$100)
alloc(newmem_y,$100)
label(code_y)
label(return_x)
label(return_y)
registersymbol(inventory_ammo_capacity)
registersymbol(inventory_ammo_used)
ammo:
  db 0
newmem_x:
  inc eax
  mov [edi+266],ax
  jmp return_x
inventory_ammo_capacity:
  jmp newmem_x
  nop 3
return_x:
newmem_y:
  mov [ammo],0000FFFF
  jmp return_y
code_y:
  mov edx,0000FFFF
  jmp return_y
inventory_ammo_used:
  jmp newmem_y
return_y:
[DISABLE]
dealloc(newmem_x)
dealloc(newmem_y)
unregistersymbol(inventory_ammo_capacity)
unregistersymbol(inventory_ammo_used)
inventory_ammo_capacity:
  db 48 66 89 87 66 02 00 00
inventory_ammo_used:
  db BA FF FF 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>245</ID>
          <Description>"Campaign   [Endurance/-------]   ----------/Howitzer"</Description>
          <LastState/>
          <Color>8000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
local pHealthOff = getAddressList().getMemoryRecordByDescription("Campaign   [-----------/Health]   Character/---------")
if (pHealthOff.Active) then
 pHealthOff.Active = false
end
{$asm}
aobscanmodule(health_howitzer,BinaryDomain.exe,F3 0F 11 40 50 C2)
alloc(newmem,$100)
label(code)
label(return)
registersymbol(health_howitzer)
newmem:
  cmp [eax+4B0],45BB8000
  jne code
  mov [eax+50],(int)1191753728
  jmp return
code:
  movss [eax+50],xmm0
  jmp return
health_howitzer:
  jmp newmem
return:
[DISABLE]
dealloc(newmem)
unregistersymbol(health_howitzer)
health_howitzer:
  db F3 0F 11 40 50
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>255</ID>
          <Description>"Campaign   [-----------/Health]   Character/---------"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
local pHealthOn = getAddressList().getMemoryRecordByDescription("Campaign   [Endurance/-------]   ----------/Howitzer")
if (pHealthOn.Active) then
 pHealthOn.Active = false
end
{$asm}
aobscanmodule(health_character,BinaryDomain.exe,F3 0F 11 40 50 C2)
alloc(newmem,$100)
label(code)
label(return)
registersymbol(health_character)
newmem:
  cmp [eax+568],3F800000
  jne code
  mov [eax+50],(float)10000
  jmp return
code:
  movss [eax+50],xmm0
  jmp return
health_character:
  jmp newmem
return:
[DISABLE]
dealloc(newmem)
unregistersymbol(health_character)
health_character:
  db F3 0F 11 40 50
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>attachlist=getAutoAttachList()
stringlist_add(attachlist,"BinaryDomain.exe");

function cycleFullCompact(sender,force) local state = not(compactmenuitem.Caption == 'Compact View Mode'); if force~=nil then state = not force end; compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'; getMainForm().Splitter1.Visible = state; getMainForm().Panel5.Visible    = state; end; function addCompactMenu() if compactmenualreadyexists then return end; local parent = getMainForm().Menu.Items; compactmenuitem = createMenuItem(parent); parent.add(compactmenuitem); compactmenuitem.Caption = 'Compact View Mode'; compactmenuitem.OnClick = cycleFullCompact; compactmenualreadyexists = 'yes'; end; addCompactMenu(); cycleFullCompact(nil,true)


</LuaScript>
</CheatTable>
